<?php
/** The contents of this file are subject to the Insignio CRM Subscription
* Agreement ("License").
* By installing or using this file, You have unconditionally agreed to the
* terms and conditions of the License, and You may not use this file except in
* compliance with the License.  Under the terms of the license, You shall not,
* among other things: 1) sublicense, resell, rent, lease, redistribute, assign
* or otherwise transfer Your rights to the Software, and 2) use the Software
* for timesharing or service bureau purposes such as hosting the Software for
* commercial gain and/or for the benefit of a third party.  Use of the Software
* may be subject to applicable fees and any use of the Software without first
* paying applicable fees is strictly prohibited.  You do not have the right to
* remove Insignio CRM copyrights from the source code or user interface.
*
* Your Warranty, Limitations of liability and Indemnity are expressly stated
* in the License.  Please refer to the License for the specific language
* governing these rights and limitations under the License.  Portions created
* by Insignio CRM are Copyright (C) 2019 Insignio CRM GmbH. All Rights Reserved.*/

 if (!defined('sugarEntry') || !sugarEntry) die('Not A Valid Entry Point'); class ICCActiveSalesTilesApi extends SugarApi { public function registerApiRest() { return [ 'mytiles' => [ 'reqType' => 'GET', 'path' => ['ICC_ActiveSalesTiles', 'my-tiles'], 'pathVars' => ['module', 'method'], 'method' => 'getMyTiles', 'shortHelp' => 'Returns the tiles accessible for the current user', 'longHelp' => '', ], 'customfilter' => [ 'reqType' => 'GET', 'path' => ['ICC_ActiveSalesTiles', 'enum', 'custom_filter'], 'pathVars' => ['module', '', 'field_name'], 'method' => 'getCustomFilters', 'shortHelp' => 'Returns available custom filters', 'longHelp' => '', ], 'report' => [ 'reqType' => 'GET', 'path' => ['ICC_ActiveSalesTiles', 'enum', 'report_id'], 'pathVars' => ['module', '', 'field_name'], 'method' => 'getReports', 'shortHelp' => 'Returns available reports', 'longHelp' => '', ], ]; } public function getReports($api, $args) { $reports = ['' => '']; if ( empty($args['data_type']) || empty($args['main_module']) || $args['data_type'] != 'report' ) { return $reports; } $query = new SugarQuery(); $query->from(BeanFactory::getBean('Reports')); $query->select('id', 'name'); $query->where()->equals('module', $args['main_module'])->equals('report_type', 'tabular'); $res = $query->execute(); $reports = array_merge($reports, array_column($res, 'name', 'id')); return $reports; } public function getCustomFilters($api, $args) { $filters = ['' => '']; if ( (isset($args['data_type']) && empty($args['data_type'])) || (isset($args['main_module']) && empty($args['main_module'])) || $args['data_type'] != 'custom_filter' ) { return $filters; } $files = array_merge( glob("modules/ICC_ActiveSalesTiles/customFilters/*Filter.php"), glob("custom/modules/ICC_ActiveSalesTiles/customFilters/*Filter.php") ); foreach ($files as $filename) { $className = 'Sugarcrm\Sugarcrm\modules\ICC_ActiveSalesTiles\customFilters\\' . basename($filename, ".php"); if (!class_exists($className)) { $className = 'Sugarcrm\Sugarcrm\custom\modules\ICC_ActiveSalesTiles\customFilters\\' . basename($filename, ".php"); if (!class_exists($className)) { throw new \Exception('Custom filter class not found: ' . $filename); } } if (!isset($args['main_module']) || in_array($args['main_module'], $className::getAllowedModules())) { $filters[basename($filename, ".php")] = $className::getName(); } } return $filters; } public function getMyTiles($api, $args) { $from = ['ac.id', 'ac.name', 'ac.main_module', 'ac.tile_icon', 'ac.list_priority', 'ac.data_type', 'ac.custom_filter', 'ac.report_id', 'ac.short_description', 'ac.color_font', 'ac.color_background', 'ac.selection_view']; $sq = new SugarQuery(); $sq->select($from); $sq->from(BeanFactory::getBean('ICC_ActiveSalesTiles'), ['alias' => 'ac']); $sq->join('users', ['joinType' => 'LEFT', 'alias' => 'ac_users']); $sq->where() ->equals('ac_users.id', $GLOBALS['current_user']->id); $this->addExpirationWhere($sq); $sq2 = new SugarQuery(); $sq2->select($from); $sq2->from(BeanFactory::getBean('ICC_ActiveSalesTiles'), ['alias' => 'ac']); $sq2->join('teams', ['joinType' => 'LEFT', 'alias' => 'ac_teams']); $sq2->where() ->in('ac_teams.id', array_keys($GLOBALS['current_user']->get_my_teams())); $this->addExpirationWhere($sq2); $roles = array_column(ACLRole::getUserRoles($GLOBALS['current_user']->id, false), 'id'); $sq3 = new SugarQuery(); $sq3->select($from); $sq3->from(BeanFactory::getBean('ICC_ActiveSalesTiles'), ['alias' => 'ac']); $sq3->join('roles', ['joinType' => 'LEFT', 'alias' => 'ac_roles']); $sq3->where() ->in('ac_roles.id', $roles); $this->addExpirationWhere($sq3); $sqU = new SugarQuery(); $sqU->distinct(true); $union = $sqU->union($sq); $union->addQuery($sq2, false); $union->addQuery($sq3, false); $sqU->orderBy("list_priority", 'ASC'); return $sqU->execute(); } protected function addExpirationWhere(SugarQuery $sq) { $sq->where()->queryOr()->lte('ac.active_date', TimeDate::getInstance()->nowDbDate()) ->isEmpty('ac.active_date'); $sq->where()->queryOr()->gte('ac.exp_date', TimeDate::getInstance()->nowDbDate()) ->isEmpty('ac.exp_date'); } }