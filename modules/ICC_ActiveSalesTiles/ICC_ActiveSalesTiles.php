<?php
/** The contents of this file are subject to the Insignio CRM Subscription
* Agreement ("License").
* By installing or using this file, You have unconditionally agreed to the
* terms and conditions of the License, and You may not use this file except in
* compliance with the License.  Under the terms of the license, You shall not,
* among other things: 1) sublicense, resell, rent, lease, redistribute, assign
* or otherwise transfer Your rights to the Software, and 2) use the Software
* for timesharing or service bureau purposes such as hosting the Software for
* commercial gain and/or for the benefit of a third party.  Use of the Software
* may be subject to applicable fees and any use of the Software without first
* paying applicable fees is strictly prohibited.  You do not have the right to
* remove Insignio CRM copyrights from the source code or user interface.
*
* Your Warranty, Limitations of liability and Indemnity are expressly stated
* in the License.  Please refer to the License for the specific language
* governing these rights and limitations under the License.  Portions created
* by Insignio CRM are Copyright (C) 2019 Insignio CRM GmbH. All Rights Reserved.*/

 require_once('modules/ICC_ActiveSalesTiles/ICC_ActiveSalesTiles_sugar.php'); require_once('modules/ICC_ActiveSalesTiles/ICCReport.php'); class ICC_ActiveSalesTiles extends ICC_ActiveSalesTiles_sugar { public function addTileConditions(array $args, SugarQuery $query, array &$options, SugarBean $seed) { switch ($this->data_type) { case 'report': $report = BeanFactory::retrieveBean('Reports', $this->report_id, ['disable_row_level_security' => true, 'encode' => false]); $this->convertReportToSugarQuery( $query, $report ); if(!empty($options['id_query'])){ $this->convertReportToSugarQuery( $options['id_query'], $report ); } break; case 'custom_filter': $className = 'Sugarcrm\Sugarcrm\modules\ICC_ActiveSalesTiles\customFilters\\' . $this->custom_filter; if (!class_exists($className)) { $className = 'Sugarcrm\Sugarcrm\custom\modules\ICC_ActiveSalesTiles\customFilters\\' . $this->custom_filter; if (!class_exists($className)) { throw new \Exception('Custom filter not found: ' . $this->custom_filter); } } $this->applyCustomFilterToSugarQuery(new $className($query)); if(!empty($options['id_query'])){ $this->applyCustomFilterToSugarQuery(new $className($options['id_query'])); } break; default: throw new Exception('Unknown data type: ' . $this->data_type); } } public function convertReportToSugarQuery(SugarQuery $query, SavedReport $report) { if (empty($report) || empty($report->id)) { throw new \Exception("Report not found"); } if ($report->module != $this->main_module) { throw new \Exception("The selected report is incompatible with this tile"); } $iccReport = new ICCReport($report->content); $iccReport->saved_report = $report; $query->whereRaw($query->getFromAlias() . '.id in (' . $iccReport->getReportSubQuery() . ')'); } protected function addWhere(SugarQuery_Builder_Where $query, array $filterDefs, array $joinedModules) { if (isset($filterDefs['operator'])) { switch ($filterDefs['operator']) { case 'AND': $wherePart = $query->queryAnd(); break; case 'OR': $wherePart = $query->queryOr(); break; default: throw new Exception('Unknown where operator: ' . $filterDefs['operator']); } unset($filterDefs['operator']); foreach ($filterDefs as $filterDef) { $this->addWhere($wherePart, $filterDef, $joinedModules); } } else { $this->addWhereOperator($query, $filterDefs, $joinedModules); } } protected function getFieldName(array $filterDefs, array $joinedModules) { return $joinedModules[$filterDefs['table_key']] . '.' . $filterDefs['name']; } protected function addWhereOperator(SugarQuery_Builder_Where $query, array $filterDefs, array $joinedModules) { switch ($filterDefs['qualifier_name']) { case 'not_empty': $query->isNotEmpty($this->getFieldName($filterDefs, $joinedModules)); break; case 'empty': $query->isEmpty($this->getFieldName($filterDefs, $joinedModules)); break; case 'not_equals': case 'not_equals_str': $query->notEquals($this->getFieldName($filterDefs, $joinedModules), $filterDefs['input_name0']); break; case 'equals': case 'is': case 'on': $query->equals($this->getFieldName($filterDefs, $joinedModules), $filterDefs['input_name0']); break; case 'contains': $query->contains($this->getFieldName($filterDefs, $joinedModules), $filterDefs['input_name0']); break; case 'starts_with': $query->starts($this->getFieldName($filterDefs, $joinedModules), $filterDefs['input_name0']); break; case 'ends_with': $query->ends($this->getFieldName($filterDefs, $joinedModules), $filterDefs['input_name0']); break; case 'before': case 'less': $query->lt($this->getFieldName($filterDefs, $joinedModules), $filterDefs['input_name0']); break; case 'after': case 'greater': $query->gt($this->getFieldName($filterDefs, $joinedModules), $filterDefs['input_name0']); break; case 'between_dates': $query->dateBetween($this->getFieldName($filterDefs, $joinedModules), [$filterDefs['input_name0'], $filterDefs['input_name1']]); break; case 'between': $query->between($this->getFieldName($filterDefs, $joinedModules), $filterDefs['input_name0'], $filterDefs['input_name1']); break; case 'one_of': $query->in($this->getFieldName($filterDefs, $joinedModules), $filterDefs['input_name0']); break; default: throw new Exception('Unknown operator: ' . $filterDefs['qualifier_name']); } } protected function addJoins(SugarQuery $query, array $filterDefs) { $joinedModules = []; $this->getJoinedModules($joinedModules, $filterDefs, $query); ksort($joinedModules); $joins = ['self' => $query]; foreach ($joinedModules as $link => $alias) { if ($link == 'self') { continue; } $linkParts = explode(':', $link); $this->getRelatedJoin($joins, $linkParts, $query); } return $joinedModules; } protected function getRelatedJoin(array &$joins, array $linkParts, SugarQuery $query) { $remainingJoinsName = implode(':', $linkParts); if (count($linkParts) === 1) { return $joins['self']; } elseif (isset($joins[$this->translateJoinName($remainingJoinsName, $query)])) { return $joins[$this->translateJoinName($remainingJoinsName, $query)]; } else { $alias = $this->translateJoinName($remainingJoinsName, $query); $linkName = array_pop($linkParts); if (count($linkParts) === 1) { $joins[$alias] = $joins['self']->join($linkName, ['alias' => $alias]); } else { $this->getRelatedJoin($joins, $linkParts, $query); $joins[$this->translateJoinName($remainingJoinsName, $query)] = $joins['self']->join($linkName, ['alias' => $alias, 'relatedJoin' => $this->translateJoinName(implode(':', $linkParts), $query)]); } } } protected function getJoinedModules(array &$joinedModules, array $filterDefs, SugarQuery $query) { foreach ($filterDefs as $key => $filterDef) { if (isset($filterDef['operator'])) { $this->getJoinedModules($joinedModules, $filterDef, $query); } elseif (isset($filterDef['table_key'])) { $joinedModules[$filterDef['table_key']] = $this->translateJoinName($filterDef['table_key'], $query); } } } public function translateJoinName($tableKey, SugarQuery $query) { if ($tableKey == 'self') { return $query->getFromAlias(); } else { return strtolower(str_replace([':', '-'], '__', $tableKey)); } } public function applyCustomFilterToSugarQuery(Sugarcrm\Sugarcrm\modules\ICC_ActiveSalesTiles\customFilters\CustomFilterInterface $customFilter) { return $customFilter->applyFilters(); } public function fill_in_additional_list_fields() { } public function retrieve($id = -1, $encode = true, $deleted = true) { $ret_val = Basic::retrieve($id, $encode, $deleted); return $ret_val; } public function populateFromRow(array $row, $convert = false) { $row = parent::populateFromRow($row, $convert); $this->name = $row['name']; return $row; } public function getRecordName() { return $this->name; } } 